buildscript {
	ext {
		snippetsDir = file('build/generated-snippets')
	}
	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.1.2.RELEASE'
		classpath 'gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.21.0'
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.9.2'
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'application'


group = 'kkdad'
version = '0.0.1-SNAPSHOT'

dependencies {
	//implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'com.google.code.gson:gson:2.8.5'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.google.guava:guava:27.1-jre'
	implementation 'org.jsoup:jsoup:1.11.3'
	implementation 'log4j:log4j:1.2.17'
	implementation 'ch.qos.logback:logback-classic:1.0.12'
	implementation 'ch.qos.logback:logback-core:1.0.12'

	implementation(project(':ComicViewer'))

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.3.RELEASE'

	testCompile 'junit:junit:4.12'
	testCompile 'org.powermock:powermock-module-junit4:2.0.0'
	testCompile 'org.powermock:powermock-api-mockito2:2.0.0'

	testImplementation 'commons-io:commons-io:2.6'

	asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:1.2.6.RELEASE'
}

jar {
	dependsOn asciidoctor
	from ("${asciidoctor.outputDir}/html5") {
		into 'static/docs'
	}
}


bootJar {
	baseName = 'comic-api'
	dependsOn asciidoctor, ':ComicViewer:buildComicViewer'
	from ("${asciidoctor.outputDir}/html5") {
		into 'static/docs'
	}
	from ("../ComicViewer/dist/ComicViewer") {
		into 'static'
	}
}

task unpack(type: Copy) {
	dependsOn bootJar
	from(zipTree(tasks.bootJar.outputs.files.singleFile))
	into("build/dependency")
}

docker {
	name "${project.group}/${bootJar.baseName}"
	copySpec.from(tasks.unpack.outputs).into("dependency")
	buildArgs(['DEPENDENCY': "dependency"])
}

test {
	outputs.dir snippetsDir
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}


application {
	mainClassName = "org.stapledon.downloader.ComicCacher"
}

task list {
	doLast {
		FileTree tree = fileTree('../ComicViewer/dist')
		tree.each {
			println it.name
		}
	}
}