plugins {
	id "com.coditory.integration-test" version '2.2.5'
	id "io.spring.dependency-management" version '1.1.7'
	id "org.springframework.boot" version '3.4.5'
	id "java"
	id "jacoco"
	id "org.springdoc.openapi-gradle-plugin" version "1.9.0"
}

// Integration test configuration
integrationTest {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    systemProperty 'spring.profiles.active', 'integration'
}

group = 'kkdad'
version = '1.2.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	integrationTestImplementation {
	    extendsFrom implementation
	}
	integrationTestCompileOnly {
	    extendsFrom compileOnly
	}
	integrationTestAnnotationProcessor {
	    extendsFrom annotationProcessor
	}
	integrationTestRuntimeOnly {
	    extendsFrom runtimeOnly
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'com.google.code.gson:gson:2.11.0'
	implementation 'com.google.guava:guava:33.4.6-jre'
	implementation 'org.jsoup:jsoup:1.18.1'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.4.0'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Security dependencies
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-config'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'javax.xml.bind:jaxb-api:2.3.1'
	implementation 'org.mindrot:jbcrypt:0.4'

	compileOnly 'org.projectlombok:lombok'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'

	testCompileOnly 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Note: The integration-test plugin automatically extends from test configurations
	// So Lombok and other dependencies from test will be available in integration tests
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.withType(Test) {
	useJUnitPlatform()
	systemProperty 'spring.profiles.active', 'test'
}

bootRun  {
	main = "org.stapledon.ComicApiApplication"
}

springBoot {
	buildInfo()
}

// JaCoCo configuration
test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }

    // Add coverage verification rules
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                "org/stapledon/config/properties/**", // Configuration classes
                "**/dto/**",                           // Data transport objects
                "**/*Exception.class"                  // Exception classes
            ])
        }))
    }
}

// Integration test coverage
task jacocoIntegrationTestReport(type: JacocoReport) {
    dependsOn integrationTest
    executionData fileTree(project.buildDir).include("/jacoco/integrationTest.exec")
    sourceSets sourceSets.main
    reports {
        xml.required = true
        html.required = true
    }
}

integrationTest {
    finalizedBy jacocoIntegrationTestReport
}

// Combined coverage report
task jacocoAllReport(type: JacocoReport) {
    dependsOn test, integrationTest
    executionData fileTree(project.buildDir).include("/jacoco/*.exec")
    sourceSets sourceSets.main
    reports {
        xml.required = true
        html.required = true
    }
}

// OpenAPI documentation configuration
openApi {
    apiDocsUrl.set("http://localhost:8080/v3/api-docs")
    outputDir.set(file("${project.buildDir}"))
    outputFileName.set("openapi.json")
    waitTimeInSeconds.set(30)
}

// API Documentation tasks
tasks.register("updateApiDocs") {
    dependsOn generateOpenApiDocs
    doLast {
        copy {
            from "${project.buildDir}/openapi.json"
            into "../docs"
        }
    }
}

tasks.named("build") {
    finalizedBy("updateApiDocs")
}