plugins {
	id "com.coditory.integration-test" version '2.2.5'
	id "io.spring.dependency-management" version '1.1.7'
	id "org.springframework.boot" version '3.5.7'
	id "java"
	id "jacoco"
	id "org.springdoc.openapi-gradle-plugin" version "1.9.0"
}

// Integration test configuration
integrationTest {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    systemProperty 'spring.profiles.active', 'integration'
}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	integrationTestImplementation {
	    extendsFrom implementation
	}
	integrationTestCompileOnly {
	    extendsFrom compileOnly
	}
	integrationTestAnnotationProcessor {
	    extendsFrom annotationProcessor
	}
	integrationTestRuntimeOnly {
	    extendsFrom runtimeOnly
	}
	// Prevent version conflicts
	all*.exclude group: 'com.vaadin.external.google', module: 'android-json'
	all*.exclude group: 'commons-logging', module: 'commons-logging'
}

// Import BOMs for consistent dependency versions
dependencyManagement {
    imports {
        // Use Jackson BOM to ensure consistent Jackson library versions
        mavenBom "com.fasterxml.jackson:jackson-bom:${rootProject.ext.jacksonBomVersion}"
    }
}

repositories {
	mavenCentral()
}

dependencies {
	// Module dependencies
	implementation project(':comic-common')
	implementation project(':comic-metrics')
	implementation project(':comic-engine')

	// Core dependencies
	implementation "com.google.code.gson:gson:${rootProject.ext.gsonVersion}"
	implementation "com.google.guava:guava:${rootProject.ext.guavaVersion}"
	implementation "org.jsoup:jsoup:${rootProject.ext.jsoupVersion}"

	// Selenium dependencies
	implementation "org.seleniumhq.selenium:selenium-java:${rootProject.ext.seleniumVersion}"
	implementation "io.github.bonigarcia:webdrivermanager:${rootProject.ext.webdrivermanagerVersion}"

	// Spring Boot starters - use managed versions
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-cache'

	// Caffeine cache
	implementation "com.github.ben-manes.caffeine:caffeine:${rootProject.ext.caffeineVersion}"

	// JDBC and H2 database for Spring Batch job repository (use Spring Boot managed versions)
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	runtimeOnly 'com.h2database:h2'

	// OpenAPI documentation
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${rootProject.ext.springdocVersion}"

	// JWT dependencies - use consistent versions
	implementation "io.jsonwebtoken:jjwt-api:${rootProject.ext.jjwtVersion}"
	runtimeOnly "io.jsonwebtoken:jjwt-impl:${rootProject.ext.jjwtVersion}"
	runtimeOnly "io.jsonwebtoken:jjwt-jackson:${rootProject.ext.jjwtVersion}"

	// Other dependencies
	implementation "org.mindrot:jbcrypt:${rootProject.ext.bcryptVersion}"

	// Lombok
	compileOnly "org.projectlombok:lombok:${rootProject.ext.lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${rootProject.ext.lombokVersion}"
	testCompileOnly "org.projectlombok:lombok:${rootProject.ext.lombokVersion}"
	testAnnotationProcessor "org.projectlombok:lombok:${rootProject.ext.lombokVersion}"

	// Annotation processors
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	// Test dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    systemProperty 'spring.profiles.active', 'test'
}

bootRun {
    mainClass = "org.stapledon.ComicApiApplication"

    // Allow command-line arguments to override system properties
    // This ensures bootRun will respect spring.profiles.active when specified via --args
	if (project.hasProperty('args')) {
		args project.args.split(',')
	} else {
		systemProperty('spring.profiles.active', 'production')
	}
}

springBoot {
	buildInfo()
}

// JaCoCo configuration
test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }

    // Add coverage verification rules
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                "org/stapledon/config/properties/**", // Configuration classes
                "**/dto/**",                           // Data transport objects
                "**/*Exception.class"                  // Exception classes
            ])
        }))
    }
}

// Integration test coverage
tasks.register('jacocoIntegrationTestReport', JacocoReport) {
    dependsOn integrationTest
    executionData fileTree(project.buildDir).include("/jacoco/integrationTest.exec")
    sourceSets sourceSets.main
    reports {
        xml.required = true
        html.required = true
    }
}

integrationTest {
    finalizedBy jacocoIntegrationTestReport
}

// Combined coverage report
tasks.register('jacocoAllReport', JacocoReport) {
    dependsOn test, integrationTest
    executionData fileTree(project.buildDir).include("/jacoco/*.exec")
    sourceSets sourceSets.main
    reports {
        xml.required = true
        html.required = true
    }
}

// OpenAPI documentation configuration
openApi {
    apiDocsUrl.set("http://localhost:8888/v3/api-docs")
    outputDir.set(file("${project.buildDir}"))
    outputFileName.set("openapi.json")
    waitTimeInSeconds.set(30)
    
    // Configure the Spring Boot application to use the 'apidocs' profile
    // This will disable comic caching during API docs generation
    customBootRun {
        args = ["--spring.profiles.active=apidocs"]
    }
}

// The API docs generation is temporarily disabled in the build process
// to prevent build failures. Use the updateApiDocs task manually when needed.

// Manual API docs generation task
tasks.register("updateApiDocs") {
    doLast {
        logger.lifecycle("Generating OpenAPI docs manually using script...")
        exec {
            workingDir project.projectDir
            commandLine "./generate-openapi-docs.sh"
        }
    }
}

// Task to run the application with apidocs profile for manual testing
tasks.register('bootRunApiDocs') {
    dependsOn 'classes'
    group = 'application'
    description = 'Runs the Spring Boot application with the apidocs profile (caching disabled)'
    
    doLast {
        exec {
            workingDir project.projectDir
            commandLine "${project.getRootDir().getAbsolutePath()}/gradlew", "bootRun", "--args=--spring.profiles.active=apidocs"
        }
    }
}